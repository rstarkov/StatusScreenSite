using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using RT.Util.ExtensionMethods;

namespace StatusScreenSite
{
    interface ITypescriptDto
    {
        DateTime ValidUntilUtc { get; }
    }

    static class TypescriptDto
    {
        public static void GenerateTypescriptFile(string filename)
        {
            var file = new StringBuilder();
            file.AppendLine("// This file has been autogenerated. To re-generate, build the Server project.");
            foreach (var type in Assembly.GetEntryAssembly().GetTypes().Where(t => t.GetInterfaces().Contains(typeof(ITypescriptDto))).OrderBy(t => t.Name))
            {
                file.AppendLine($"export interface I{type.Name} {{");
                foreach (var prop in type.GetProperties().OrderBy(p => p.Name))
                {
                    file.Append($"    {prop.Name}: ");
                    var propType = prop.PropertyType;
                    outputType(file, propType);
                    file.AppendLine(";");
                }
                file.AppendLine($"}}");
            }

            filename = Path.GetFullPath(filename);
            Console.WriteLine($"Saving DTOs to {filename}...");
            Directory.CreateDirectory(Path.GetDirectoryName(filename));
            File.WriteAllText(filename, file.ToString());
        }

        private static void outputType(StringBuilder file, Type propType)
        {
            bool nullable = !propType.IsValueType;
            if (propType.IsGenericType && propType.GetGenericTypeDefinition() == typeof(Nullable<>))
            {
                nullable = true;
                propType = propType.GetGenericArguments()[0];
            }
            if (propType == typeof(string))
                file.Append("string");
            else if (propType == typeof(int) || propType == typeof(double) || propType == typeof(decimal))
                file.Append("number");
            else if (propType == typeof(DateTime))
                file.Append("string");
            else if (propType.IsArray)
            {
                file.Append("(");
                outputType(file, propType.GetElementType());
                file.Append(")[]");
            }
            else
            {
                Console.WriteLine($"ERROR: unknown type {propType.FullName}");
            }

            if (nullable)
                file.Append(" | null");
        }
    }
}
